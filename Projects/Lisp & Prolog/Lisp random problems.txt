__________________________________________________________________________________
;Write twice the n-th element of a linear list
(defun twice(L E C)
    (cond
        ( (null L) nil )
        ( (or(< C E) (> C E)) (append (list (car L)) (twice (cdr L) E (+ C 1))) )
        ( (= C E) (append (append (list (car L)) (list (car L))) (twice (cdr L) E (+ C 1))) )
     )
)
;(print(twice '(1 2 3 4 5 6 8 9 10) 3 1))
__________________________________________________________________________________
;Write a function to return an association list with the two lists given as parameters. 
(defun associ(A B)
   (cond
        ( (or (null A) (null B)) nil )
        ( T(append (append (list(append (list (car A)) (append (list ".") (list (car B)) )))) (associ (cdr A) (cdr B))) )
    )
)
;(print(associ '(A B C) '(X Y Z)))
__________________________________________________________________________________
;Write a function to determine the number of all sublists of a given list, on any level.
;A sublist is either the list itself, or any element that is a list, at any level

(defun listss(L C)
    (cond
        ( (null L) C )
        ( (listp (car L)) (listss (cdr L) (+ C (listss (car L) 1)) ) )
        ( T(listss (cdr L) C) )
     )
)
;(print(listss '(1 2 (3 ((4) (5)) (6 7)) 8 (9 10)) 1))
__________________________________________________________________________________
;Write a function to merge two sorted lists without keeping double values.

(defun mergelists(A B)
    (cond
        ( (and(null A) (null B)) nil )
        ( (or (null A) (> (car A) (car B))) (append (list (car B)) (mergelists A (cdr B)) ) )
        ( (or (null B) (< (car A) (car B))) (append (list (car A)) (mergelists (cdr A) B) ) )
        ( (= (car A) (car B)) (append (list (car A)) (mergelists (cdr A) (cdr B)) ) )
     )
 )
;(print(mergelists '(1 3 5 7) '(7 9 10)))
__________________________________________________________________________________
;Write a function to return the set of all the atoms of a list.
;Exemplu: (1 (2 (1 3 (2 4) 3) 1) (1 4)) ==> (1 2 3 4)

(defun check(L E)
    (cond
        ( (null L) T )
        ( (and (not (listp (car L))) (not (= (car L) E)) ) (check (cdr L) E) )
        ( (listp (car L)) (check (cdr L) E) )
        ( (= (car L) E) nil )
     )
)

(defun atoms(L)
    (cond
        ( (null L) nil )
        ( (listp (car L)) () )
     )
 )

__________________________________________________________________________________
(defun preorder(x)
    (cond
        ((null x) nil)
        ((atom x) (cons x nil))
        (T (apply 'append (mapcar 'preorder x)))
    )
)


;inorder(l1,l2,l3) = { l=[], nil
                     ; inorder(l2) U l1 U inorder(l3)

(defun inorder (L)
	(cond
		((null L) nil)
		(T (append (inorder (car (cdr L))) (append (list (car L)) (inorder (car(cdr (cdr L)))))))
	)
)

(print(inorder '(1(5)(3(4)(2)))))

__________________________________________________________________________________
;Write a function to return the sum of all numerical atoms in a list at superficial level.
(defun sum(L S)
 (cond
     ( (null L) S )
     ( (numberp (car L)) (sum (cdr L) (+ S (car L))) )
     (T (sum (cdr L) S))
 )
)
(print(sum '(1 2 (3 4) 7) 9))

__________________________________________________________________________________
;Write a function to return the list of the first elements of all list elements of a given list with an odd
;number of elements at superficial level
(defun solve (L)
    (cond 
		((null L) nil)
		((atom (car L)) (solve(cdr L)))
		((and (listp (car L)) (= (mod (length (car L)) 2) 1)) (append (list (car (car L))) (append (solve (car L)) (solve (cdr L)))))
		(T (append (solve (car L)) (solve (cdr L))))
	)
)

(defun firstfrom(L)
 (cond
  ((= (mod (length L) 2) 1) (append (list (car L)) (solve L)) )
  (t (solve L))
  )
 )

(print(firstfrom '(1 2 (3 (4 5) (6 7)) 8 (9 10 11))))

__________________________________________________________________________________
; Write a function to reverse a list with its all sublists, on all levels
(defun rev (l)
    (cond
        ((null l) '())
        ( (listp (car l)) (append (rev (cdr l)) (list(rev(car l)))))
        (T (append (rev (cdr l)) (list (car l))))
)
)

(print(rev '(9 2 (4 (5 (6))) 7 8) ))

__________________________________________________________________________________
;Write a function to return the difference of two sets
(defun findMe (L n)
  (cond
   ((null L) nil)
   ((= n (car L)) t)
   ((findMe (cdr L) n))))

(defun diff(A B)
    (cond
        ((NULL A) ())
        ((NULL B) ())
        ((NOT(findMe B (CAR A)))(CONS (CAR A)(diff (CDR A) B)))
        (T(diff(CDR A) B))
        ))


(defun solve(A B)
    (APPEND (diff A B) (diff B A)))

(print(solve '(1 2 3 4 6 7) '(2 4 3 5 9)))
           
           
   
        (T(apply '*(MAPCAR 'produs L)))
        )
    )

_________________________________________________________________
;Suma
(print "Hello, world!")

(defun sum(L)
(COND
 ((NULL L) 0)
 (T(+(CAR L)(sum(CDR L))))))
 
 (print(sum'(1 2 3 4 5)))


